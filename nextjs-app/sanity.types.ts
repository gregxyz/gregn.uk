/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type VideoProject = {
  _type: "videoProject";
  project: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  };
};

export type ProjectList = {
  _type: "projectList";
  projects: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
};

export type Hero = {
  _type: "hero";
  title: string;
  titleLarge: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  links?: Array<{
    title?: string;
    url?: string;
    _type: "link";
    _key: string;
  }>;
  skills?: Array<string>;
};

export type FeaturedProject = {
  _type: "featuredProject";
  project: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  };
};

export type RichText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Link = {
  _type: "link";
  linkType?: "href" | "page" | "project";
  href?: string;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  project?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  };
  openInNewTab?: boolean;
};

export type ContentBlocks = Array<{
  _key: string;
} & FeaturedProject | {
  _key: string;
} & Hero | {
  _key: string;
} & ProjectList | {
  _key: string;
} & VideoProject>;

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
  basePrompt?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  subtitle?: string;
  slug: Slug;
  client: string;
  url?: string;
  services?: Array<string>;
  tagline: string;
  secondaryTagline?: string;
  tools: Array<string>;
  previewImage: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    attribution?: string;
    _type: "image";
  };
  heroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    attribution?: string;
    _type: "image";
  };
  video?: {
    file?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    };
    attribution?: string;
  };
  description?: string;
  prompt: RichText;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  pageBuilder?: ContentBlocks;
};

export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  pageBuilder?: ContentBlocks;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = VideoProject | ProjectList | Hero | FeaturedProject | RichText | Link | ContentBlocks | Settings | Project | Page | Home | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
  basePrompt?: string;
} | null;
// Variable: getHomeQuery
// Query: *[_type == 'home'][0]{      _id,  _type,  name,  slug,  "pageBuilder": pageBuilder[]{    ...,    _type == "hero" => {      ...,      image {  ...,  "lqip": asset->metadata.lqip}    },    _type == "featuredProject" => {      ...,      project-> {       ...,       previewImage {  ...,  "lqip": asset->metadata.lqip},       heroImage {  ...,  "lqip": asset->metadata.lqip}      },    },    _type == "videoProject" => {      ...,      project-> {       ...,       previewImage {  ...,  "lqip": asset->metadata.lqip},       heroImage {  ...,  "lqip": asset->metadata.lqip}      },    },    _type == "projectList" => {      ...,      projects[]-> {       ...,       previewImage {  ...,  "lqip": asset->metadata.lqip}      },    },  },  }
export type GetHomeQueryResult = {
  _id: string;
  _type: "home";
  name: null;
  slug: null;
  pageBuilder: Array<{
    _key: string;
    _type: "featuredProject";
    project: {
      _id: string;
      _type: "project";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string;
      subtitle?: string;
      slug: Slug;
      client: string;
      url?: string;
      services?: Array<string>;
      tagline: string;
      secondaryTagline?: string;
      tools: Array<string>;
      previewImage: {
        asset: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
        lqip: string | null;
      };
      heroImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
        lqip: string | null;
      } | null;
      video?: {
        file?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
          };
          media?: unknown;
          _type: "file";
        };
        attribution?: string;
      };
      description?: string;
      prompt: RichText;
    };
  } | {
    _key: string;
    _type: "hero";
    title: string;
    titleLarge: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    links?: Array<{
      title?: string;
      url?: string;
      _type: "link";
      _key: string;
    }>;
    skills?: Array<string>;
    image: null;
  } | {
    _key: string;
    _type: "projectList";
    projects: Array<{
      _id: string;
      _type: "project";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string;
      subtitle?: string;
      slug: Slug;
      client: string;
      url?: string;
      services?: Array<string>;
      tagline: string;
      secondaryTagline?: string;
      tools: Array<string>;
      previewImage: {
        asset: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
        lqip: string | null;
      };
      heroImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
      };
      video?: {
        file?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
          };
          media?: unknown;
          _type: "file";
        };
        attribution?: string;
      };
      description?: string;
      prompt: RichText;
    }>;
  } | {
    _key: string;
    _type: "videoProject";
    project: {
      _id: string;
      _type: "project";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string;
      subtitle?: string;
      slug: Slug;
      client: string;
      url?: string;
      services?: Array<string>;
      tagline: string;
      secondaryTagline?: string;
      tools: Array<string>;
      previewImage: {
        asset: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
        lqip: string | null;
      };
      heroImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
        lqip: string | null;
      } | null;
      video?: {
        file?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
          };
          media?: unknown;
          _type: "file";
        };
        attribution?: string;
      };
      description?: string;
      prompt: RichText;
    };
  }> | null;
} | null;
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{      _id,  _type,  name,  slug,  "pageBuilder": pageBuilder[]{    ...,    _type == "hero" => {      ...,      image {  ...,  "lqip": asset->metadata.lqip}    },    _type == "featuredProject" => {      ...,      project-> {       ...,       previewImage {  ...,  "lqip": asset->metadata.lqip},       heroImage {  ...,  "lqip": asset->metadata.lqip}      },    },    _type == "videoProject" => {      ...,      project-> {       ...,       previewImage {  ...,  "lqip": asset->metadata.lqip},       heroImage {  ...,  "lqip": asset->metadata.lqip}      },    },    _type == "projectList" => {      ...,      projects[]-> {       ...,       previewImage {  ...,  "lqip": asset->metadata.lqip}      },    },  },  }
export type GetPageQueryResult = {
  _id: string;
  _type: "page";
  name: string;
  slug: Slug;
  pageBuilder: Array<{
    _key: string;
    _type: "featuredProject";
    project: {
      _id: string;
      _type: "project";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string;
      subtitle?: string;
      slug: Slug;
      client: string;
      url?: string;
      services?: Array<string>;
      tagline: string;
      secondaryTagline?: string;
      tools: Array<string>;
      previewImage: {
        asset: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
        lqip: string | null;
      };
      heroImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
        lqip: string | null;
      } | null;
      video?: {
        file?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
          };
          media?: unknown;
          _type: "file";
        };
        attribution?: string;
      };
      description?: string;
      prompt: RichText;
    };
  } | {
    _key: string;
    _type: "hero";
    title: string;
    titleLarge: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    links?: Array<{
      title?: string;
      url?: string;
      _type: "link";
      _key: string;
    }>;
    skills?: Array<string>;
    image: null;
  } | {
    _key: string;
    _type: "projectList";
    projects: Array<{
      _id: string;
      _type: "project";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string;
      subtitle?: string;
      slug: Slug;
      client: string;
      url?: string;
      services?: Array<string>;
      tagline: string;
      secondaryTagline?: string;
      tools: Array<string>;
      previewImage: {
        asset: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
        lqip: string | null;
      };
      heroImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
      };
      video?: {
        file?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
          };
          media?: unknown;
          _type: "file";
        };
        attribution?: string;
      };
      description?: string;
      prompt: RichText;
    }>;
  } | {
    _key: string;
    _type: "videoProject";
    project: {
      _id: string;
      _type: "project";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string;
      subtitle?: string;
      slug: Slug;
      client: string;
      url?: string;
      services?: Array<string>;
      tagline: string;
      secondaryTagline?: string;
      tools: Array<string>;
      previewImage: {
        asset: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
        lqip: string | null;
      };
      heroImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        attribution?: string;
        _type: "image";
        lqip: string | null;
      } | null;
      video?: {
        file?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
          };
          media?: unknown;
          _type: "file";
        };
        attribution?: string;
      };
      description?: string;
      prompt: RichText;
    };
  }> | null;
} | null;
// Variable: getProjectQuery
// Query: *[_type == 'project' && slug.current == $slug][0]{    ...,    previewImage {  ...,  "lqip": asset->metadata.lqip},    heroImage {  ...,  "lqip": asset->metadata.lqip}  }
export type GetProjectQueryResult = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  subtitle?: string;
  slug: Slug;
  client: string;
  url?: string;
  services?: Array<string>;
  tagline: string;
  secondaryTagline?: string;
  tools: Array<string>;
  previewImage: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    attribution?: string;
    _type: "image";
    lqip: string | null;
  };
  heroImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    attribution?: string;
    _type: "image";
    lqip: string | null;
  } | null;
  video?: {
    file?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    };
    attribution?: string;
  };
  description?: string;
  prompt: RichText;
} | null;
// Variable: pagesSlugs
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type PagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: projectsSlugs
// Query: *[_type == "project" && defined(slug.current)]  {"slug": slug.current}
export type ProjectsSlugsResult = Array<{
  slug: string;
}>;
// Variable: allSlugs
// Query: *[(_type == "page" || _type == "project") && defined(slug.current)]  {"slug": slug.current, "_type": _type}
export type AllSlugsResult = Array<{
  slug: string;
  _type: "page";
} | {
  slug: string;
  _type: "project";
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"settings\"][0]": SettingsQueryResult;
    "\n  *[_type == 'home'][0]{\n    \n  _id,\n  _type,\n  name,\n  slug,\n  \"pageBuilder\": pageBuilder[]{\n    ...,\n    _type == \"hero\" => {\n      ...,\n      image {\n  ...,\n  \"lqip\": asset->metadata.lqip\n}\n    },\n    _type == \"featuredProject\" => {\n      ...,\n      project-> {\n       ...,\n       previewImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n},\n       heroImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n}\n      },\n    },\n    _type == \"videoProject\" => {\n      ...,\n      project-> {\n       ...,\n       previewImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n},\n       heroImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n}\n      },\n    },\n    _type == \"projectList\" => {\n      ...,\n      projects[]-> {\n       ...,\n       previewImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n}\n      },\n    },\n  },\n\n  }\n": GetHomeQueryResult;
    "\n  *[_type == 'page' && slug.current == $slug][0]{\n    \n  _id,\n  _type,\n  name,\n  slug,\n  \"pageBuilder\": pageBuilder[]{\n    ...,\n    _type == \"hero\" => {\n      ...,\n      image {\n  ...,\n  \"lqip\": asset->metadata.lqip\n}\n    },\n    _type == \"featuredProject\" => {\n      ...,\n      project-> {\n       ...,\n       previewImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n},\n       heroImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n}\n      },\n    },\n    _type == \"videoProject\" => {\n      ...,\n      project-> {\n       ...,\n       previewImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n},\n       heroImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n}\n      },\n    },\n    _type == \"projectList\" => {\n      ...,\n      projects[]-> {\n       ...,\n       previewImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n}\n      },\n    },\n  },\n\n  }\n": GetPageQueryResult;
    "\n  *[_type == 'project' && slug.current == $slug][0]{\n    ...,\n    previewImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n},\n    heroImage {\n  ...,\n  \"lqip\": asset->metadata.lqip\n}\n  }\n": GetProjectQueryResult;
    "\n  *[_type == \"page\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PagesSlugsResult;
    "\n  *[_type == \"project\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": ProjectsSlugsResult;
    "\n  *[(_type == \"page\" || _type == \"project\") && defined(slug.current)]\n  {\"slug\": slug.current, \"_type\": _type}\n": AllSlugsResult;
  }
}
